name: Deploy preview app
on:
  pull_request:
  push:
    branches: develop

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    env:
      MONGODB_URI: ${{ secrets.MONGODB_URI_DEV }}
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.vercel-deploy.outputs.preview-url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy PR
        id: vercel-deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-project-name: bmft
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_TEAM_ID }}
          scope: ${{ secrets.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}

      - name: Run Newman Tests
        run: |
          newman run test/postman_collection.json --env-var  BMFT_URL=${{steps.vercel-deploy.outputs.preview-url}} --env-var AUTH_API_URL=${{vars.AUTH_API_URL}}graphql

  trigger-bmft-e2e-tests:
    name: Trigger BMFT E2E Tests
    needs: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      BASE_URL: ${{ needs.deploy.outputs.preview-url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Export modules_cache_key to $GITHUB_OUTPUT
        shell: bash
        id: mvars
        run: |
          export HASH=${{ hashFiles('package-lock.lock') }}
          echo "modules_cache_key=bmft-node_modules-$HASH" >> "$GITHUB_OUTPUT"

      - name: Checking node_modules cache against modules_cache_key
        uses: martijnhols/actions-cache/check@v3
        id: cache-node-modules-check
        with:
          path: node_modules
          key: ${{ steps.mvars.outputs.modules_cache_key }}

      - name: Install dependencies
        if: steps.cache-node-modules-check.outputs.cache-hit != 'true'
        run: npm install

      - name: Export playwright_cache_key to $GITHUB_OUTPUT
        shell: bash
        id: pvars
        run: |
          export PW_HASH=$( npx playwright --version | shasum -t )
          echo "playwright_cache_key=bmft-playwright-$PW_HASH" >> $GITHUB_OUTPUT

      - name: Checking Playwright cache against playwright_cache_key
        uses: actions/cache@v3
        id: cache-playwright-check
        with:
          path: /home/runner/.cache/ms-playwright
          key: ${{ steps.pvars.outputs.playwright_cache_key }}

      - name: Install Playwright
        if: steps.cache-playwright-check.outputs.cache-hit != 'true'
        run: yarn playwright install --with-deps

      - name: Run tests
        run: |
          npm run test:e2e

      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: Playwright trace
          path: test-results/**/trace.zip
